1. PyNDN Build and install instructions
---------------------------------


1.1 GENERATING CONFIGURE FILE

This step should be already done for you, but if configure file is not present
you might need to perform following operations:

  mkdir build-aux
  autoreconf -i

or just run:

  ./bootstrap

Later when you fetch new version of files you can just simply use autoreconf
with no options.


1.2 DEPENDENCIES

- GNU automake 1.11
- GNU libtool (not sure of minimum version, using 2.2.6b)
- NDNx 0.1+  https://github.com/named-data/ndnx
- OpenSSL (need to be linked to the same version used by libndn
- Python 2.7+ (tested with 2.7.0 and 3.2.1)

1.2 CONFIGURING AND BUILDING

Run ./configure script.

Relevant options:
* --with-ndn=DIR - path to NDNx distribution directory
* PYTHON=<python interpreter> - path to python interpreter you want to use
                                In some cases you might need to specify
                                LDFLAGS=-L/usr/lib
* PYTHON_SITE_PKG=<path> - custom path where pyndn should be installed
* OPENSSL_CRYPTO=<library> - full path to the library used by libndn
* OPENSSL_INCLUDES, OPENSSL_LDFLAGS, OPENSSL_LIBS - to override determined
                                                    values

Then do `make` to compile the code.


1.3 TESTING

To run tests for the suite:

  make check


1.4 INSTALLING

The package will be installed in site-packages of the selected python.

  make install

or

  make install-strip (to strip any debugging symbols)

2. Platform specific notes
--------------------------

3.0 All platforms

- when configuring make sure you compile PyNDN with the same openssl library as
  you compiled NDNx with. To specify alternative version use
  --with-openssl=<openssl root dir>
  An sign of linking with wrong library is getting segment violation on
  signing.py testcase.

3.1 MacOS X

- when building python from sources you need to run ./configure --enable-shared
  otherwise you might experience crash with message:
  "Fatal Python error: PyThreadState_Get: no current thread"
  when trying to import pyndn. I'm looking into ways to make code also work
  when python is statically compiled.

- On MacOS X 10.7 (Lion) while compiling the module you'll get bunch of
  warnings about openssl functions being deprecatead. This is ok. The message
  is because Apple decided to replace openssl with their own implementation
  called Common Crypto and want to discourage developers from using OpenSSL.
  If you don't want to see the warnings you might want to point to alternative
  version (e.g. from Mac Ports) using OPENSSL_* variables.  Remember that you
  need to compile PyNDN with the same version of OpenSSL that you compiled NDNx
  otherwise PyNDN will crash when trying to sign Content Objects.
